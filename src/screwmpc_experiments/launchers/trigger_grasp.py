from __future__ import annotations

import argparse
from xmlrpc import client

import numpy as np
import spatialmath

# this is the transform between flange and TCP of the Panda
T_F_EE: spatialmath.SE3 = spatialmath.SE3(0, 0, 0.1034) * spatialmath.SE3.Rz(
    -45, unit="deg"
)


def homogeneous_to_waypoint(
    T: np.ndarray, grasp: float
) -> tuple[list[float], list[float], float]:
    """Computes waypoint arguments given pose as homogeneous transform.

    You may use this function to apply any necessary transforms."""
    # TODO: the frame seems to be neither flange nor TCP, please investigate
    se3 = spatialmath.SE3(T, check=False)
    # we apply a 45 degree rotation around the *local* z-axis
    se3 *= spatialmath.SE3.Rz(45, unit="deg")  # this fixes the orientation
    return (se3.t.tolist(), spatialmath.UnitQuaternion(se3).vec.tolist(), grasp)


def main() -> None:
    """Entry point, triggers a grasp in the simulation."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--hostname",
        type=str,
        help="Hostname of the computer running the simulation",
        default="localhost",
    )
    args = parser.parse_args()

    # pose is direct output of the task planner (=cheezit cracker box)
    pos = [0.2067777, -0.36626508, 0.28314002]
    quat = [0.8329, 0.0000, 0.0000, 0.5535]
    pose = (pos, quat)
    # size is computed based on the bounding box vertices
    size = [0.19498751 / 2, 0.06656145 / 2, 0.20757379 / 2]

    # height of the table computed as pos[2]-size[2]/2
    # see src/screwmpc_experiments/assets/pivoting.xml for reference

    # Make sure arguments to the server proxy are lists,
    # numpy arrays are not marshable.
    with client.ServerProxy(f"http://{args.hostname}:9001/") as proxy:
        proxy.reload_box(pose, size)  # reload bounding box in sim

    # these waypoints were generated by the task planner
    pre_grasp = np.array(
        [
            [0.00000000e00, 9.21942249e-01, 3.87327367e-01, 1.11268165e-01],
            [0.00000000e00, -3.87327367e-01, 9.21942249e-01, -5.89164396e-01],
            [1.00000000e00, 0.00000000e00, 0.00000000e00, 3.14353125e-01],
            [0.00000000e00, 0.00000000e00, 0.00000000e00, 1.00000000e00],
        ]
    )

    # NOTE: I added this waypoint, without it the robot collides with the box
    approach = pre_grasp.copy()
    approach[2, 3] += 0.1

    grasp = np.array(
        [
            [0.00000000e00, 9.21942249e-01, 3.87327367e-01, 1.25444346e-01],
            [0.00000000e00, -3.87327367e-01, 9.21942249e-01, -5.55421310e-01],
            [1.00000000e00, 0.00000000e00, 0.00000000e00, 3.14353125e-01],
            [0.00000000e00, 0.00000000e00, 0.00000000e00, 1.00000000e00],
        ]
    )

    pivot = np.array(
        [
            [3.87327367e-01, 9.21942249e-01, -1.49219169e-16, 2.95243828e-01],
            [9.21942249e-01, -3.87327367e-01, 1.83112305e-16, -1.51253338e-01],
            [1.11022302e-16, -2.08495863e-16, -1.00000000e00, 4.82740640e-01],
            [0.00000000e00, 0.00000000e00, 0.00000000e00, 1.00000000e00],
        ]
    )

    waypoints = []
    waypoints.append(homogeneous_to_waypoint(approach, 1))
    waypoints.append(homogeneous_to_waypoint(pre_grasp, 1))
    waypoints.append(homogeneous_to_waypoint(grasp, 1))
    waypoints.append(homogeneous_to_waypoint(grasp, 0))  # same pose, grasp only
    waypoints.append(homogeneous_to_waypoint(pivot, 0))
    waypoints.append(homogeneous_to_waypoint(pivot, 1))  # same pose, grasp only

    with client.ServerProxy(f"http://{args.hostname}:9000/") as proxy:
        proxy.add_waypoints(waypoints)  # add waypoints to sim
